{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","food","id","name","city","days_valid","className","alt","src","width","height","CardList","cards","map","card","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","results","filteredCards","filter","toLowerCase","includes","day","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mOAgBeA,EAdF,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,GAAIC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,WAClC,OAEI,yBAAKC,UAAU,uDACX,yBAAKA,UAAU,UAAUC,IAAKN,EAAMO,IAAG,6CAAwCN,GAAMO,MAAM,MAAMC,OAAO,QACxG,6BACI,4BAAKP,GACL,2BAAIC,GACJ,2BAAG,2BAAIC,QCcRM,EArBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACf,OACI,6BAEQA,EAAMC,KAAK,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACAC,IAAKD,EACLb,GAAIU,EAAMG,GAAGb,GACbC,KAAMS,EAAMG,GAAGZ,KACfF,KAAMW,EAAMG,GAAGd,KACfG,KAAMQ,EAAMG,GAAGX,KACfC,WAAYO,EAAMG,GAAGV,kBCA9BY,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKb,UAAU,OACX,2BACIA,UAAU,kCACVc,KAAK,SACLC,YAAY,4BACZC,SAAUH,MCaXI,E,YAnBX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,UAAU,GAHC,E,+EAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,wCAEJG,KAAKL,MAAMO,a,GAhBEC,aCkDbC,G,kBA7CX,aAAe,IAAD,8BACV,+CAaJC,eAAiB,SAACC,GACd,EAAKL,SAAU,CAACM,YAAaD,EAAME,OAAOC,SAb1C,EAAKb,MAAQ,CACTb,MAAO,GACPwB,YAAa,IAJP,E,iFAQO,IAAD,OAChBG,MAAM,wEACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAO,OAAI,EAAKb,SAAS,CAAClB,MAAO+B,S,+BAUpC,IAAD,OACAC,EAAgBf,KAAKJ,MAAMb,MAAMiC,QAAO,SAAA/B,GAC1C,OAAQA,EAAKX,KAAK2C,cAAcC,SAAS,EAAKtB,MAAMW,YAAYU,gBACzDhC,EAAKb,KAAK6C,cAAcC,SAAS,EAAKtB,MAAMW,YAAYU,gBACxDhC,EAAKT,WAAWQ,KAAI,SAAAmC,GAAG,OAAIA,EAAIF,iBAAeC,SAAS,EAAKtB,MAAMW,YAAYU,kBAGzF,OAAgC,IAA5BjB,KAAKJ,MAAMb,MAAMqC,OACV,wBAAI3C,UAAU,MAAd,iBAGH,yBAAKA,UAAU,MACX,wBAAIA,UAAU,MAAd,+CACA,+BAAI,oFACJ,kBAAC,EAAD,CAAWa,aAAcU,KAAKK,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUtB,MAASgC,U,GAtCzBZ,cCMEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.fc3e3064.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ( {food, id, name, city, days_valid}) => {\r\n    return (\r\n        // Use tachyons to create green background and grow upon hover\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img className='br-pill' alt={food} src={`http://lorempixel.com/200/200/food/${id}`} width='200' height='200' />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{city}</p>\r\n                <p><i>{days_valid}</i></p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({cards}) => {\r\n    return (\r\n        <div>\r\n            {\r\n                cards.map( (card, i) => {\r\n                    return (\r\n                        <Card\r\n                        key={i}\r\n                        id={cards[i].id}\r\n                        name={cards[i].name}\r\n                        food={cards[i].food}\r\n                        city={cards[i].city}\r\n                        days_valid={cards[i].days_valid}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n                className=\"pa3 ba b-green bg-lightest-blue\"\r\n                type='search'\r\n                placeholder=\"search for restaurants...\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1> Error. </h1>\r\n        }\r\n        return this.props.children  \r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            cards: [],\r\n            searchField: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://my-json-server.typicode.com/serena-ramley/ReactGallery/cards')\r\n            .then(response => response.json())\r\n            .then(results => this.setState({cards: results}))\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState( {searchField: event.target.value})\r\n    }\r\n\r\n\r\n//                    \r\n\r\n    render () {\r\n        const filteredCards = this.state.cards.filter(card => {\r\n            return (card.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n                || card.food.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n                || card.days_valid.map(day => day.toLowerCase()).includes(this.state.searchField.toLowerCase())\r\n            )\r\n        })\r\n        if (this.state.cards.length === 0) {\r\n            return <h1 className=\"tc\"> Loading ... </h1>\r\n        } else {\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1\"> Featured Restaurants with Weekly Discounts</h1>\r\n                    <p> <i>Note: This app is to demo a searcheable gallery app.</i></p>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <ErrorBoundary>\r\n                        <CardList cards = {filteredCards} />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}